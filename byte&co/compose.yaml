version: '3.8'

services:
  #___________Microservice Authentification
  backend-auth:
    build: ./authentification
    restart: always
    ports:
      - "8082:8080" # différent des autres ports pour éviter les conflits
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dpg-cutt46popnds739qav80-a.frankfurt-postgres.render.com:5432/assurmob
      SPRING_DATASOURCE_USERNAME: assurmob_user
      SPRING_DATASOURCE_PASSWORD: MEbiFOhZtaE7FDf4A387P986PTZbXq77
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - react-spring

  # db-auth:
  #   image: mysql:8.0.19
  #   environment:
  #     - MYSQL_DATABASE=auth_db
  #     - MYSQL_USER=auth_user
  #     - MYSQL_PASSWORD_FILE=/run/secrets/db-password-auth
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password-auth
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
  #     interval: 3s
  #     retries: 5
  #     start_period: 30s
  #   secrets:
  #     - db-password-auth
  #   volumes:
  #     - db-auth-data:/var/lib/mysql
  #   networks:
  #     - auth-mysql


  #___________Microservice Gestion Client
  backend-gestionclient:
    build: ./gestionclient
    restart: always
    ports:
      - "8081:8080"  # ou un autre port si conflit
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dpg-cutt46popnds739qav80-a.frankfurt-postgres.render.com:5432/assurmob
      SPRING_DATASOURCE_USERNAME: assurmob_user
      SPRING_DATASOURCE_PASSWORD: MEbiFOhZtaE7FDf4A387P986PTZbXq77
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - react-spring


  #___________Microservice Gestion des Contrats
  backend-gestioncontrat:
    build: ./gestioncontrats
    restart: always
    ports:
      - "8086:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dpg-cutt46popnds739qav80-a.frankfurt-postgres.render.com:5432/assurmob
      SPRING_DATASOURCE_USERNAME: assurmob_user
      SPRING_DATASOURCE_PASSWORD: MEbiFOhZtaE7FDf4A387P986PTZbXq77
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - react-spring

  # db-gestioncontrat:
  #   image: mysql:8.0.19
  #   environment:
  #     - MYSQL_DATABASE=gestioncontrat_db
  #     - MYSQL_USER=gestioncontrat_user
  #     - MYSQL_PASSWORD_FILE=/run/secrets/db-password-gestioncontrat
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password-gestioncontrat
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
  #     interval: 3s
  #     retries: 5
  #     start_period: 30s
  #   secrets:
  #     - db-password-gestioncontrat
  #   volumes:
  #     - db-gestioncontrat-data:/var/lib/mysql
  #   networks:
  #     - gestioncontrat-mysql


  #___________Microservice Gestion des Offres
  backend-gestionoffre:
    build: ./gestionoffre
    restart: always
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dpg-cutt46popnds739qav80-a.frankfurt-postgres.render.com:5432/assurmob
      SPRING_DATASOURCE_USERNAME: assurmob_user
      SPRING_DATASOURCE_PASSWORD: MEbiFOhZtaE7FDf4A387P986PTZbXq77
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    networks:
      - react-spring

  # db-gestionoffre:
  #   image: mysql:8.0.19
  #   environment:
  #     - MYSQL_DATABASE=gestionoffre_db
  #     - MYSQL_USER=gestionoffre_user
  #     - MYSQL_PASSWORD_FILE=/run/secrets/db-password-gestionoffre
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password-gestionoffre
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
  #     interval: 3s
  #     retries: 5
  #     start_period: 30s
  #   secrets:
  #     - db-password-gestionoffre
  #   volumes:
  #     - db-gestionoffre-data:/var/lib/mysql
  #   networks:
  #     - gestionoffre-mysql


  # #___________Microservice Empreinte Carbone
  # backend-empreintecarbone:
  #   build: ./empreintecarbone/backend
  #   restart: always
  #   ports:
  #     - "8084:8080"
  #   networks:
  #     - react-spring


  #___________Microservice Gestion de Sinistre
  backend-gestionsinistres:
    build: ./gestionsinistres
    restart: always
    ports:
      - "8085:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://dpg-cutt46popnds739qav80-a.frankfurt-postgres.render.com:5432/assurmob
      SPRING_DATASOURCE_USERNAME: assurmob_user
      SPRING_DATASOURCE_PASSWORD: MEbiFOhZtaE7FDf4A387P986PTZbXq77
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
    
    networks:
      - react-spring

  # db-gestionsinistres:
  #   image: mysql:8.0.19
  #   environment:
  #     - MYSQL_DATABASE=gestionsinistres_db
  #     - MYSQL_USER=gestionsinistres_user
  #     - MYSQL_PASSWORD_FILE=/run/secrets/db-password-gestionsinistres
  #     - MYSQL_ROOT_PASSWORD_FILE=/run/secrets/db-password-gestionsinistres
  #   restart: always
  #   healthcheck:
  #     test: ["CMD", "mysqladmin", "ping", "-h", "127.0.0.1", "--silent"]
  #     interval: 3s
  #     retries: 5
  #     start_period: 30s
  #   secrets:
  #     - db-password-gestionsinistres
  #   volumes:
  #     - db-gestionsinistres-data:/var/lib/mysql
  #   networks:
  #     - gestionsinistres-mysql


#___________Frontend
  frontend:
    build:
      context: frontend
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend/src:/code/src
      - /project/node_modules
    networks:
      - react-spring
    depends_on:
      - backend-auth

#___________Volumes
volumes:
  db-auth-data: {}
  db-gestionclient-data: {}
  db-gestioncontrat-data: {}
  db-gestionoffre-data: {}
  db-gestionsinistres-data: {}

#___________Secrets
secrets:
  db-password-auth:
    file: ./authentification/db/password.txt
  db-password-gestionclient:
    file: ./gestionclient/db/password.txt
  db-password-gestionsinistres:
    file: ./gestionsinistres/db/password.txt

#___________Networks
networks:
  react-spring: {}
  auth-mysql: {}
  gestionclient-mysql: {}
  gestioncontrat-mysql: {}
  gestionoffre-mysql: {}
  gestionsinistres-mysql: {}
